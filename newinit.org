#+TITLE: Emacs Literate Configuration
#+AUTHOR: Andrew Foltz-Morrison
#+PROPERTY: header-args :tangle yes :results silent

* initfile.org

* Initialization steps
The code below compiles to init.el, the file that emacs expects when first booting up. By reading the code from that file, it will then execute the rest of the code in this org-babel file. This contains a minimal setup, so that we can use ~use-package~ to load packages section-by-section.

# This example config came from [[http://cachestocaches.com/2015/8/getting-started-use-package/][Caches to Caches]]. 

#+begin_src emacs-lisp :tangle init.el

  ;;; Package --- Summary

  ;;; Commentary:
  ;; Emacs init file responsible for either loading a pre-compiled configuration file
  ;; or tangling and loading a literate org configuration file.

  ;;; Code:

  ;; Don't attempt to find/apply special file handlers to files loaded during startup.
  (let ((file-name-handler-alist nil))
     ;; If config is pre-compiled, then load that
     (if (file-exists-p (expand-file-name "newinit.elc" user-emacs-directory))
         (load-file (expand-file-name "newinit.elc" user-emacs-directory))
       ;; Otherwise use org-babel to tangle and load the configuration
       (require 'org)
       (org-babel-load-file (expand-file-name "newinit.org" user-emacs-directory))))

(if (require 'quelpa nil t)
    (quelpa-self-upgrade)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer))) 


;; init.el ends here

#+end_src

#+begin_src emacs-lisp
;;; package --- Summary
;;; Commentary:
; This file is not a part of GNU Emacs.

;;; Code:
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("elpa" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(unless (package-installed-p 'diminish)
  (package-install 'diminish))
(unless (package-installed-p 'bind-key)
  (package-install 'bind-key))

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)


#+end_src

* Internal Dependencies
#+begin_src emacs-lisp
(use-package quelpa-use-package
  :ensure t
  :init (setq quelpa-update-melpa-p nil)
)
#+end_src

* Keybindings

Emacs' default keybindings are linked with repetitive strain injury. Xah-Fly-Keys emphasizes modal editing (similar to Vim) and key sequences to avoid the strain associated with pressing key chords.
#+begin_src emacs-lisp  
(use-package xah-fly-keys
  :ensure t
  :pin melpa
  :config ; custom keybindings for common commands I use.
  (xah-fly-keys 1)
  (xah-fly-keys-set-layout "qwerty")
  (define-key xah-fly-leader-key-map
   (kbd "z") 'comment-region)
  (define-key xah-fly-leader-key-map
   (kbd "w") 'org-agenda)

  (define-key xah-fly-leader-key-map
   (kbd "c") 'org-capture)
  (define-key xah-fly-leader-key-map
   (kbd "b") 'sdcv-search-pointer)
  (define-key xah-fly-leader-key-map
   (kbd "5") 'split-window-vertically)
  (define-key xah-fly-leader-key-map
   (kbd "y") 'swiper)

)
  (define-key xah-fly-key-map
   (kbd "<backtab>") 'yas-expand)


#+end_src

* Version Control
Tools that make it easier to ensure that all changes are tracked under revision control.
#+begin_src emacs-lisp 
(use-package magit
  :ensure t
  :pin melpa)

(use-package ghub
  :ensure t
  :pin melpa)

(use-package magithub
  :ensure t
  :pin melpa
  :config
  (setq magithub-clone-default-directory "~/repos_external")
)
#+end_src

* Language tooling
** Python
Tooling that offers interactive evaluation of Python code and facilitates working with virtual environments via Anaconda.
#+begin_src emacs-lisp  

(require 'python)

(use-package websocket
  :pin melpa
  :ensure t
)

(use-package ein
  :pin melpa
  :ensure t
  :config
  (require 'ein)
  (require 'ein-loaddefs)
  (require 'ein-notebook)
  (require 'ein-subpackages)
)
#+end_src
** Clojure
#+begin_src emacs-lisp  
(use-package cider
  :pin melpa
  :ensure t
  :init
  (add-to-list 'exec-path "~/bin")
)


#+end_src

** Scala
#+begin_src emacs-lisp 
(use-package ensime
  :ensure t
  :pin melpa
  :config
  (setq ensime-sbt-command "/usr/bin/sbt"
    sbt:program-name "/usr/bin/sbt")
  (setq ensime-startup-notification nil)
)

(use-package sbt-mode
  :pin melpa)
(use-package scala-mode
  :pin melpa)

#+end_src

** YAML
#+begin_src emacs-lisp 
(use-package yaml-mode
  :pin melpa
  :mode ("\\.yml\\'" . yaml-mode)
)
#+end_src

** JSON
Everyone's favorite data interchange format.
#+begin_src emacs-lisp
(use-package json-mode
  :ensure t
  :pin melpa
)
#+end_src

** CSV
Tabular data tools are a must!

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :pin elpa
  :ensure t
)
#+END_SRC

** Plotting

#+begin_src emacs-lisp 
(use-package graphviz-dot-mode
  :pin melpa
  :ensure t
  :mode ("\\.dot\\'" . graphviz-dot-mode)
)
#+end_src

** Org-Babel
Interactive evaluation of source code in org-babel blocks
#+begin_src emacs-lisp  
(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure . t)
   (sh . t)
   (ditaa . t)
   (dot . t)
   (python . t)
   (scala . t)))

(setq org-src-tab-acts-natively t)


(use-package ob-clojure
  :pin melpa
  :config
  (setq org-babel-clojure-backend 'cider)
)
#+end_src
* Organizational Tools
** Org-Mode
A pretty good way of organizing hierarchical information, and a pretty helpful task manager. The code below sets up org-mode for task management.
#+begin_src emacs-lisp 
(use-package org
  :ensure org-plus-contrib
  :defer t)

(setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                           ("~/org/someday.org" :level . 1)
                           ("~/org/upcoming.org" :maxlevel . 2)
                           ("~/repos_main/orgbrain/decks.org" :maxlevel . 1)))
(setq org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil)
; I capture a lot of multi-level files, so I want to make sure they get captured in total
(add-hook 'org-capture-prepare-finalize-hook 'beginning-of-buffer)
(setq org-todo-keywords '(
  (sequence "TODO(t)" "WAITING(w)" "EVENT(e)" "PROJECT(p)" "GOAL(g)" "|"
 "COMPLETE(d)" "CANCELLED(c)" "PAST EVENT(o)" "NOTE(n)" "COMPLETE PROJECT(q)")
  (sequence "NOT GROOMED(b)" "OPEN(s)" "IN PROGRESS(a)" "EPIC(r)" "|"
  "REVIEW(y)" "DONE(f)" "WON'T DO(x)")))




; org-agenda
(setq org-agenda-files '("~/org/gtd.org"
                         "~/org/upcoming.org"))

(setq org-default-notes-file (concat org-directory "/inbox.org"))
(setq org-capture-templates
 '(("t" "Todo" entry (file+olp "~/org/inbox.org" "Tasks")
        "* TODO %?\n:PROPERTIES:\n:CREATED: %u\n:END:\n"
        :empty-lines 1)
("n" "Note" entry (file+olp "~/org/inbox.org" "Notes")
        "* NOTE %?\n:PROPERTIES:\n:CREATED: %u\n:END:\n"
        :empty-lines 1)
   ("m" "Memorize" entry (file+olp "~/org/inbox.org" "Facts") 
        "* %? \t :note:\n :PROPERTIES: \n :CREATED: %u \n :ANKI_NOTE_TYPE: Basic \n :END: \n** Front\n\n** Back"
        :empty-lines 1))) 
#+end_src

Org-mode is also a pretty effective way of composing information to be exported to another format. 
#+begin_src emacs-lisp 
(require 'ox)
(use-package org-download
  :ensure t
  :pin melpa
)
#+end_src
Org-mode can also be used as a personal information manager and help set up flashcards for use with Anki, the spaced repetition app.

#+begin_src emacs-lisp 
(use-package htmlize
  :pin melpa
  :ensure t
)

(use-package anki-editor
  :pin melpa
  :ensure t
)

  (use-package org-brain
    :pin melpa
    :ensure t
    :config
    (setq org-brain-path "~/repos_main/orgbrain")
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  )

  (use-package deft
    :pin melpa
    :ensure t
    :config
    (setq deft-extensions '("org"))
    (setq deft-directory org-brain-path)
    (setq deft-recursive t)
  )

  (use-package org-journal
    :pin melpa
    :ensure t
    :config
    (setq org-journal-dir "~org/journal")
  )
#+end_src

Org-mode has enough features that custom keymaps are a worthwhile idea.

#+begin_src emacs-lisp

(defun afm/xah-org-setup () 
  (setq afm/org-xah-keys (make-sparse-keymap))
  (define-key afm/org-xah-keys (kbd "t") 'org-todo)
  (define-key afm/org-xah-keys (kbd "a") 'org-archive-subtree)
  (define-key afm/org-xah-keys (kbd "s") 'org-schedule)
  (define-key afm/org-xah-keys (kbd "d") 'org-deadline)
  (define-key afm/org-xah-keys (kbd "j") 'org-journal-new-entry)
  (define-key afm/org-xah-keys (kbd ".") 'org-timestamp)
  (define-key afm/org-xah-keys (kbd "l") 'org-set-tags-command)
  (define-key afm/org-xah-keys (kbd "r") 'org-refile)
  (define-key afm/org-xah-keys (kbd "p") 'org-priority)
  (define-key afm/org-xah-keys (kbd "i") 'org-id-get-create)
  (define-key afm/org-xah-keys (kbd "c") 'anki-editor-insert-note)
  (define-key afm/org-xah-keys (kbd "n") 'org-narrow-to-subtree)
  (define-key afm/org-xah-keys (kbd "w") 'widen)
  (define-key xah-fly-leader-key-map (kbd "o") afm/org-xah-keys)
  (define-key xah-fly-leader-key-map
    (kbd "e") 'org-babel-execute-src-block)
)

(add-hook 'org-mode-hook 'afm/xah-org-setup)

#+end_src

** Discoverability
These tools make it easier to figure out what it's possible to do within Emacs, within filesystems, and within whatever language we're working with.

Ivy/Counsel/Swiper
#+begin_src emacs-lisp  
(use-package ivy
  :ensure t
  :pin melpa
  :config
  (ivy-mode 1)
  
)

(use-package counsel
  :ensure t
  :pin melpa
  :config
  (counsel-mode 1)
)

(use-package swiper
  :pin melpa
  :ensure t
)

(use-package counsel-dash
  :ensure t
  :pin melpa
  :config
  (setq counsel-dash-common-docsets 
    '("Bash" "Clojure" "Emacs_Lisp" "Java_SE8" "Pandas" "Python_3" "Racket"
      "Scala"))
  (setq counsel-dash-docsets-path "~/.docsets")
  (add-hook 'scala-mode-hook (lambda () 
    (setq-local counsel-dash-docsets '("Scala" "Java_SE8"))))
  (add-hook 'clojure-mode-hook (lambda () 
    (setq-local counsel-dash-docsets '("Clojure"))))
  (setq counsel-dash-browser-func 'eww)
  
)
#+end_src


~which-key~ makes the commands associated with key sequences more visible.
#+begin_src emacs-lisp  
(use-package which-key
  :ensure t
  :pin melpa
  :config
  (which-key-mode)
)
#+end_src

File browsing utilities
#+begin_src emacs-lisp

(setq dired-listing-switches "-alh")

(use-package dired-subtree
  :ensure t
  :pin melpa
)

(use-package ranger
  :ensure t
  :pin melpa
)

#+end_src
** Editing Helpers
These tools make working with text (source code, prose, input boxes) easier. Flycheck helps spot syntax errors, sdcv helps define words, and atomic-chrome allows for much more efficient entry of text into browser fields (using emacs).

#+begin_src emacs-lisp 
(use-package flycheck
  :pin melpa
  :ensure t
  :config (global-flycheck-mode))

(use-package sdcv
  :pin melpa
  :ensure t
)

(use-package nov
  :pin melpa
  :ensure t
  :mode ("\\.epub\\'" . nov-mode)
)

(use-package atomic-chrome
  :pin melpa
  :ensure t
  :config
  (setq atomic-chrome-url-major-mode-alist
    '(("databricks" . scala-mode)
      ("ipynb" . python-mode)))
  (atomic-chrome-start-server)
)

(use-package undo-tree
  :pin elpa
  :ensure t
  :config
  (global-undo-tree-mode)
)

#+end_src
** Others
Control spotify from within emacs
#+begin_src emacs-lisp
(use-package counsel-spotify
  :pin melpa
  :ensure t
)
#+end_src

* Appearance
** Pre-made themes
#+begin_src emacs-lisp
(use-package alect-themes
  :pin melpa
  :ensure t
  :defer t
)

(use-package apropospriate-theme
  :pin melpa
  :ensure t
  :defer t
)

(use-package zerodark-theme
  :pin melpa
  :ensure t
  :defer t
)

(use-package creamsody-theme
  :pin melpa
  :ensure t
  :defer t
)

(use-package darktooth-theme
  :pin melpa
  :ensure t
  :defer t
  :config 
  (darktooth-modeline)
)

(use-package doom-themes
  :pin melpa
  :ensure t
  :defer t
  :config 
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (doom-themes-org-config)
)



#+end_src

** Custom theme: wold

#+begin_src emacs-lisp :tangle wold-theme.el
 (deftheme wold)
 (let ((class '((class color) (min-colors 89)))
       (fg1 "#ececec")
       (fg2 "#d9d9d9")
       (fg3 "#c6c6c6")
       (fg4 "#b3b3b3")
       (bg1 "#233538")
       (bg2 "#354548")
       (bg3 "#465558")
       (bg4 "#586568")
       (builtin "#fba75b")
       (keyword "#2f9d63")
       (const   "#eca661")
       (comment "#9e9e9e")
       (func    "#75b7ff")
       (str     "#b7a96b")
       (type    "#d65e5e")
       (var     "#c76c70")
       (c76c70 "#ff0c00")
       (warning "#ff0c00")
       (warning2 "#ff006b")
       (highlight "#e5bd39")
      )
   (custom-theme-set-faces
   'wold
        `(default ((,class (:background ,bg1 :foreground ,fg1))))
        `(font-lock-builtin-face ((,class (:foreground ,builtin))))
        `(font-lock-comment-face ((,class (:foreground ,comment))))
	`(font-lock-negation-char-face ((,class (:foreground ,const))))
	`(font-lock-reference-face ((,class (:foreground ,const))))
	`(font-lock-constant-face ((,class (:foreground ,const))))
        `(font-lock-doc-face ((,class (:foreground ,comment))))
        `(font-lock-function-name-face ((,class (:foreground ,func ))))
        `(font-lock-keyword-face ((,class (:bold ,class :foreground ,keyword))))
        `(font-lock-string-face ((,class (:foreground ,str))))
        `(font-lock-type-face ((,class (:foreground ,type ))))
        `(font-lock-variable-name-face ((,class (:foreground ,var))))
        `(font-lock-warning-face ((,class (:foreground ,warning :background ,bg2))))
        `(region ((,class (:background ,fg1 :foreground ,bg1))))
        `(highlight ((,class (:foreground ,fg3 :background ,bg3))))
	`(hl-line ((,class (:background  ,bg2))))
	`(fringe ((,class (:background ,bg2 :foreground ,fg4))))
	`(cursor ((,class (:background ,keyword))))
        `(show-paren-match-face ((,class (:background ,warning))))
        `(isearch ((,class (:bold t :foreground ,warning :background ,bg3))))
        `(mode-line ((,class (:box (:line-width 1 :color nil) :bold t :foreground ,fg4 :background ,bg2))))
        `(mode-line-inactive ((,class (:box (:line-width 1 :color nil :style pressed-button) :foreground ,var :background ,bg1 :weight normal))))
        `(mode-line-buffer-id ((,class (:bold t :foreground ,func :background nil))))
	`(mode-line-highlight ((,class (:foreground ,keyword :box nil :weight bold))))
        `(mode-line-emphasis ((,class (:foreground ,fg1))))
	`(vertical-border ((,class (:foreground ,fg3))))
        `(minibuffer-prompt ((,class (:bold t :foreground ,keyword))))
        `(default-italic ((,class (:italic t))))
	`(link ((,class (:foreground ,const :underline t))))
	`(org-code ((,class (:foreground ,fg2))))
	`(org-hide ((,class (:foreground ,fg4))))
        `(org-level-1 ((,class (:bold t :foreground ,fg2 :height 1.1))))
        `(org-level-2 ((,class (:bold nil :foreground ,fg3))))
        `(org-level-3 ((,class (:bold t :foreground ,fg4))))
        `(org-level-4 ((,class (:bold nil :foreground ,bg4))))
        `(org-date ((,class (:underline t :foreground ,var) )))
        `(org-footnote  ((,class (:underline t :foreground ,fg4))))
        `(org-link ((,class (:underline t :foreground ,type ))))
        `(org-special-keyword ((,class (:foreground ,func))))
        `(org-block ((,class (:foreground ,fg3))))
        `(org-quote ((,class (:inherit org-block :slant italic))))
        `(org-verse ((,class (:inherit org-block :slant italic))))
        `(org-todo ((,class (:box (:line-width 1 :color ,fg3) :foreground ,keyword :bold t))))
        `(org-done ((,class (:box (:line-width 1 :color ,bg3) :bold t :foreground ,bg4))))
        `(org-warning ((,class (:underline t :foreground ,warning))))
        `(org-agenda-structure ((,class (:weight bold :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
        `(org-agenda-date ((,class (:foreground ,var :height 1.1 ))))
        `(org-agenda-date-weekend ((,class (:weight normal :foreground ,fg4))))
        `(org-agenda-date-today ((,class (:weight bold :foreground ,keyword :height 1.4))))
        `(org-agenda-done ((,class (:foreground ,bg4))))
	`(org-scheduled ((,class (:foreground ,type))))
        `(org-scheduled-today ((,class (:foreground ,func :weight bold :height 1.2))))
	`(org-ellipsis ((,class (:foreground ,builtin))))
	`(org-verbatim ((,class (:foreground ,fg4))))
        `(org-document-info-keyword ((,class (:foreground ,func))))
	`(font-latex-bold-face ((,class (:foreground ,type))))
	`(font-latex-italic-face ((,class (:foreground ,var :italic t))))
	`(font-latex-string-face ((,class (:foreground ,str))))
	`(font-latex-match-reference-keywords ((,class (:foreground ,const))))
	`(font-latex-match-variable-keywords ((,class (:foreground ,var))))
	`(ido-only-match ((,class (:foreground ,warning))))
	`(org-sexp-date ((,class (:foreground ,fg4))))
	`(ido-first-match ((,class (:foreground ,keyword :bold t))))
	`(gnus-header-content ((,class (:foreground ,keyword))))
	`(gnus-header-from ((,class (:foreground ,var))))
	`(gnus-header-name ((,class (:foreground ,type))))
	`(gnus-header-subject ((,class (:foreground ,func :bold t))))
	`(mu4e-view-url-number-face ((,class (:foreground ,type))))
	`(mu4e-cited-1-face ((,class (:foreground ,fg2))))
	`(mu4e-cited-7-face ((,class (:foreground ,fg3))))
	`(mu4e-header-marks-face ((,class (:foreground ,type))))
	`(ffap ((,class (:foreground ,fg4))))
	`(js2-private-function-call ((,class (:foreground ,const))))
	`(js2-jsdoc-html-tag-delimiter ((,class (:foreground ,str))))
	`(js2-jsdoc-html-tag-name ((,class (:foreground ,var))))
	`(js2-external-variable ((,class (:foreground ,type  ))))
        `(js2-function-param ((,class (:foreground ,const))))
        `(js2-jsdoc-value ((,class (:foreground ,str))))
        `(js2-private-member ((,class (:foreground ,fg3))))
        `(js3-warning-face ((,class (:underline ,keyword))))
        `(js3-error-face ((,class (:underline ,warning))))
        `(js3-external-variable-face ((,class (:foreground ,var))))
        `(js3-function-param-face ((,class (:foreground ,fg2))))
        `(js3-jsdoc-tag-face ((,class (:foreground ,keyword))))
        `(js3-instance-member-face ((,class (:foreground ,const))))
	`(warning ((,class (:foreground ,warning)))) 
	`(ac-completion-face ((,class (:underline t :foreground ,keyword))))
	`(info-quoted-name ((,class (:foreground ,builtin))))
	`(info-string ((,class (:foreground ,str))))
	`(icompletep-determined ((,class :foreground ,builtin)))
        `(undo-tree-visualizer-current-face ((,class :foreground ,builtin)))
        `(undo-tree-visualizer-default-face ((,class :foreground ,fg2)))
        `(undo-tree-visualizer-unmodified-face ((,class :foreground ,var)))
        `(undo-tree-visualizer-register-face ((,class :foreground ,type)))
	`(slime-repl-inputed-output-face ((,class (:foreground ,type))))
        `(trailing-whitespace ((,class :foreground nil :background ,warning)))
        `(rainbow-delimiters-depth-1-face ((,class :foreground ,fg1)))
        `(rainbow-delimiters-depth-2-face ((,class :foreground ,type)))
        `(rainbow-delimiters-depth-3-face ((,class :foreground ,var)))
        `(rainbow-delimiters-depth-4-face ((,class :foreground ,const)))
        `(rainbow-delimiters-depth-5-face ((,class :foreground ,keyword)))
        `(rainbow-delimiters-depth-6-face ((,class :foreground ,fg1)))
        `(rainbow-delimiters-depth-7-face ((,class :foreground ,type)))
        `(rainbow-delimiters-depth-8-face ((,class :foreground ,var)))
        `(magit-item-highlight ((,class :background ,bg3)))
        `(magit-section-heading        ((,class (:foreground ,keyword :weight bold))))
        `(magit-hunk-heading           ((,class (:background ,bg3))))
        `(magit-section-highlight      ((,class (:background ,bg2))))
        `(magit-hunk-heading-highlight ((,class (:background ,bg3))))
        `(magit-diff-context-highlight ((,class (:background ,bg3 :foreground ,fg3))))
        `(magit-diffstat-added   ((,class (:foreground ,type))))
        `(magit-diffstat-removed ((,class (:foreground ,var))))
        `(magit-process-ok ((,class (:foreground ,func :weight bold))))
        `(magit-process-ng ((,class (:foreground ,warning :weight bold))))
        `(magit-branch ((,class (:foreground ,const :weight bold))))
        `(magit-log-author ((,class (:foreground ,fg3))))
        `(magit-hash ((,class (:foreground ,fg2))))
        `(magit-diff-file-header ((,class (:foreground ,fg2 :background ,bg3))))
        `(lazy-highlight ((,class (:foreground ,fg2 :background ,bg3))))
        `(term ((,class (:foreground ,fg1 :background ,bg1))))
        `(term-color-black ((,class (:foreground ,bg3 :background ,bg3))))
        `(term-color-blue ((,class (:foreground ,func :background ,func))))
        `(term-color-red ((,class (:foreground ,keyword :background ,bg3))))
        `(term-color-green ((,class (:foreground ,type :background ,bg3))))
        `(term-color-yellow ((,class (:foreground ,var :background ,var))))
        `(term-color-magenta ((,class (:foreground ,builtin :background ,builtin))))
        `(term-color-cyan ((,class (:foreground ,str :background ,str))))
        `(term-color-white ((,class (:foreground ,fg2 :background ,fg2))))
        `(rainbow-delimiters-unmatched-face ((,class :foreground ,warning)))
        `(helm-header ((,class (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
        `(helm-source-header ((,class (:foreground ,keyword :background ,bg1 :underline nil :weight bold))))
        `(helm-selection ((,class (:background ,bg2 :underline nil))))
        `(helm-selection-line ((,class (:background ,bg2))))
        `(helm-visible-mark ((,class (:foreground ,bg1 :background ,bg3))))
        `(helm-candidate-number ((,class (:foreground ,bg1 :background ,fg1))))
        `(helm-separator ((,class (:foreground ,type :background ,bg1))))
        `(helm-time-zone-current ((,class (:foreground ,builtin :background ,bg1))))
        `(helm-time-zone-home ((,class (:foreground ,type :background ,bg1))))
        `(helm-buffer-not-saved ((,class (:foreground ,type :background ,bg1))))
        `(helm-buffer-process ((,class (:foreground ,builtin :background ,bg1))))
        `(helm-buffer-saved-out ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-buffer-size ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-ff-directory ((,class (:foreground ,func :background ,bg1 :weight bold))))
        `(helm-ff-file ((,class (:foreground ,fg1 :background ,bg1 :weight normal))))
        `(helm-ff-executable ((,class (:foreground ,var :background ,bg1 :weight normal))))
        `(helm-ff-invalid-symlink ((,class (:foreground ,warning2 :background ,bg1 :weight bold))))
        `(helm-ff-symlink ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
        `(helm-ff-prefix ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
        `(helm-grep-cmd-line ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-grep-file ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-grep-finish ((,class (:foreground ,fg2 :background ,bg1))))
        `(helm-grep-lineno ((,class (:foreground ,fg1 :background ,bg1))))
        `(helm-grep-match ((,class (:foreground nil :background nil :inherit helm-match))))
        `(helm-grep-running ((,class (:foreground ,func :background ,bg1))))
        `(helm-moccur-buffer ((,class (:foreground ,func :background ,bg1))))
        `(helm-source-go-package-godoc-description ((,class (:foreground ,str))))
        `(helm-bookmark-w3m ((,class (:foreground ,type))))
        `(company-echo-common ((,class (:foreground ,bg1 :background ,fg1))))
        `(company-preview ((,class (:background ,bg1 :foreground ,var))))
        `(company-preview-common ((,class (:foreground ,bg2 :foreground ,fg3))))
        `(company-preview-search ((,class (:foreground ,type :background ,bg1))))
        `(company-scrollbar-bg ((,class (:background ,bg3))))
        `(company-scrollbar-fg ((,class (:foreground ,keyword))))
        `(company-tooltip ((,class (:foreground ,fg2 :background ,bg1 :bold t))))
        `(company-tooltop-annotation ((,class (:foreground ,const))))
        `(company-tooltip-common ((,class ( :foreground ,fg3))))
        `(company-tooltip-common-selection ((,class (:foreground ,str))))
        `(company-tooltip-mouse ((,class (:inherit highlight))))
        `(company-tooltip-selection ((,class (:background ,bg3 :foreground ,fg3))))
        `(company-template-field ((,class (:inherit region))))
        `(web-mode-builtin-face ((,class (:inherit ,font-lock-builtin-face))))
        `(web-mode-comment-face ((,class (:inherit ,font-lock-comment-face))))
        `(web-mode-constant-face ((,class (:inherit ,font-lock-constant-face))))
        `(web-mode-keyword-face ((,class (:foreground ,keyword))))
        `(web-mode-doctype-face ((,class (:inherit ,font-lock-comment-face))))
        `(web-mode-function-name-face ((,class (:inherit ,font-lock-function-name-face))))
        `(web-mode-string-face ((,class (:foreground ,str))))
        `(web-mode-type-face ((,class (:inherit ,font-lock-type-face))))
        `(web-mode-html-attr-name-face ((,class (:foreground ,func))))
        `(web-mode-html-attr-value-face ((,class (:foreground ,keyword))))
        `(web-mode-warning-face ((,class (:inherit ,font-lock-warning-face))))
        `(web-mode-html-tag-face ((,class (:foreground ,builtin))))
        `(jde-java-font-lock-package-face ((t (:foreground ,var))))
        `(jde-java-font-lock-public-face ((t (:foreground ,keyword))))
        `(jde-java-font-lock-private-face ((t (:foreground ,keyword))))
        `(jde-java-font-lock-constant-face ((t (:foreground ,const))))
        `(jde-java-font-lock-modifier-face ((t (:foreground ,fg2))))
        `(jde-jave-font-lock-protected-face ((t (:foreground ,keyword))))
        `(jde-java-font-lock-number-face ((t (:foreground ,var))))))

;;;###autoload
;(when load-file-name
;  (add-to-list 'custom-theme-load-path
;               (file-name-as-directory (file-name-directory load-file-name))))

;(provide-theme 'wold)

#+end_src

#+begin_src emacs-lisp  
(load-file "~/.emacs.d/wold-theme.el")
#+end_src
** Setting the theme
#+begin_src emacs-lisp
(load-theme 'wold t)
#+end_src

** Other appearance options

Golden ratio keeps the active window the largest, resizing the others according to the golden ratio.
#+begin_src emacs-lisp  

(use-package golden-ratio
  :pin melpa
  :ensure t
  :config
  (golden-ratio-mode 1)
  (setq golden-ratio-auto-scale t)
)
#+end_src

League Mono is currently the best programming font that I know of. 
#+begin_src emacs-lisp  
(defun afm-set-fonts ()

(set-face-font 'fixed-pitch "League Mono-12")
(set-face-font 'variable-pitch "IBM Plex Sans-13.5:spacing=110")
(set-face-font 'org-column "League Mono-12")
(set-face-font 'mode-line "League Mono-10.5")
(set-face-font 'mode-line-inactive "League Mono-10.5")
;(set-face-font 'linum "League Mono-10.5")
)
(afm-set-fonts)

  (defun set-buffer-variable-pitch ()
    (interactive)
    (variable-pitch-mode t)
    (setq line-spacing 0.45)
     (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    )

  (add-hook 'org-mode-hook 'set-buffer-variable-pitch)
  (add-hook 'eww-mode-hook 'set-buffer-variable-pitch)
  (add-hook 'markdown-mode-hook 'set-buffer-variable-pitch)
  (add-hook 'Info-mode-hook 'set-buffer-variable-pitch)

#+end_src


These features are used to make the rest of the interface look prettier.
#+begin_src emacs-lisp  
(use-package font-lock+
  :ensure t
  :quelpa
  (font-lock+ :repo "emacsmirror/font-lock-plus" :fetcher github))

(use-package spaceline
  :pin melpa
  :ensure t
  :config
  (require 'spaceline-config)
  (spaceline-emacs-theme)
  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mode-line-inactive nil :box nil)
  (setq powerline-default-separator "nil")
)

(use-package all-the-icons
  :pin melpa
  :ensure t
)

(use-package all-the-icons-dired
  :pin melpa
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode)
)

(use-package all-the-icons-ivy
  :pin melpa
  :ensure t
  :config
  (all-the-icons-ivy-setup)
)



(use-package dim
  :ensure t
  :pin melpa
  :config
  (dim-minor-names
 '((visual-line-mode   " ↩")
   (auto-fill-function " ↵")
   (yas-minor-mode "𝛶")
   (eldoc-mode         ""    eldoc)
   (golden-ratio-mode "φ")
   (auto-revert-mode "↺")
   (xah-fly-keys "Σ")
   (buffer-face-mode "β")
   (whitespace-mode    " _"  whitespace)
   (paredit-mode       " ()" paredit)
   (ensime-mode "ϵ")
   (company-mode "¢")
   (column-enforce-mode "↹")
   (undo-tree-mode "⸙")
   (ivy-mode "❦")
   (counsel-mode "⏣")
   (flycheck-mode "✔")
   (which-key-mode "⌨")
   (atomic-chrome-edit-mode "⚛")
   (rainbow-mode "✏")
   ))
 (dim-major-names
 '((emacs-lisp-mode           "EL")
   (scala-mode "﻿Ｓ")
   (ensime-inf-mode "ϵ>")
   (inferior-emacs-lisp-mode  "EL>")
   (calendar-mode             "📆")
   (org-mode "✎")
   (org-agenda-mode            "☑")
 ))
)

(use-package diminish
  :pin melpa
  :ensure t
  :config
  (diminish 'buffer-face-mode)
  (diminish 'which-key-mode)  
)


(set-fringe-mode '(1 . 1))


(use-package column-enforce-mode
  :ensure t
  :pin melpa
  :config (global-column-enforce-mode 1)
)
(global-hl-line-mode 1)

(setq org-todo-keyword-faces
  '(("TODO" . (:background "firebrick" :foreground "gray18"))
   ("WAITING" . (:background "tomato" :foreground "gray18"))
   ("EVENT" . (:background "burlywood" :foreground "gray18"))
   ("PROJECT" . (:background "deep sky blue" :foreground "gray18"))
   ("COMPLETE" . (:background "SpringGreen3" :foreground "gray18"))
   ("CANCELLED" .  (:background "tan" :foreground "gray18"))
; JIRA colors
   ("NOT GROOMED" .  (:background "slate gray" :foreground "white smoke"))
   ("EPIC" .  (:background "coral3" :foreground "white smoke"))
   ("OPEN" .  (:background "cadet blue" :foreground "white smoke"))
   ("IN PROGRESS" .  (:background "steel blue" :foreground "white smoke"))
   ("REVIEW" .  (:background "sea green" :foreground "white smoke"))
   ("DONE" .  (:background "forest green" :foreground "white smoke"))
   ("WON'T DO" .  (:background "rosy brown" :foreground "white smoke"))

))

; Ebook prettification
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Charter"
                                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
#+end_src 

One tool that will help with further customization (and generative design!) is rainbow-mode, which colorizes color codes in buffers.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :pin elpa
  :ensure t
)
#+END_SRC

Finally, we'll disable some things we don't need when working in a keyboard-centric text editor.
#+begin_src emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
#+end_src
* Daemon Hooks
In order to handle emacs in daemon mode, we need a few helper functions:
#+BEGIN_SRC emacs-lisp

(add-hook 'after-make-frame-functions
  (load-theme 'wold t)
  (afm-set-fonts)
  (set-fringe-mode '(1 . 1))
)

;(create-fontset-from-fontset-spec standard-fontset-spec) ;to make --daemon work
;(dolist (font (reverse default-fonts))
;  (set-fontset-font "fontset-default" 'unicode font nil 'prepend))
;(add-to-list 'default-frame-alist '(font . "fontset-default"))


#+END_SRC

* Utility
This function ensures that init.el is tangled each time this file is saved.
Adapted from [[https://emacs.stackexchange.com/questions/20707/automatically-tangle-org-files-in-a-specific-directory][stack overflow]]. 
#+begin_src emacs-lisp  
(defun my/tangle-emacs ()
  "If the current file is in '~/repos_main/emacs', the code blocks are tangled"
  (when (equal buffer-file-name
               (concat (getenv "HOME") "/repos-main/emacs/newinit.org"))
    (org-babel-tangle)
    (message "%s tangled" buffer-file-name)))

(add-hook 'after-save-hook #'my/tangle-emacs)
#+end_src

#+RESULTS:

